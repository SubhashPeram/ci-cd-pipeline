pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        ECR_REPO = '119537256357.dkr.ecr.us-east-1.amazonaws.com/myapp'
        VENV_PATH = 'venv'
    }

    stages {
        stage('Setup Python Virtual Environment') {
            steps {
                sh '''
                    python3 -m venv $VENV_PATH
                    . $VENV_PATH/bin/activate
                    pip install --upgrade pip
                    pip install openpyxl
                '''
            }
        }

        stage('Generate Python Script') {
            steps {
                script {
                    writeFile file: 'parse_excel.py', text: '''
import openpyxl

# Load Excel workbook and sheet
wb = openpyxl.load_workbook('docker_config.xlsx')
ws = wb.active

config = {}

# Read rows starting from row 2
for row in ws.iter_rows(min_row=2, max_col=2, values_only=True):
    key, value = row
    if key and value:
        config[key.strip().lower()] = str(value).strip()

print("Config loaded:", config)

# Validate required keys
required_keys = ['base_image', 'arg_app_name', 'arg_version', 'expose_port']
for key in required_keys:
    if key not in config:
        raise ValueError(f'Missing {key} in Excel')

# Generate Dockerfile
with open('Dockerfile', 'w') as f:
    f.write(f'FROM {config["base_image"]}\n')
    f.write(f'WORKDIR {config["workdir"]}\n')
    f.write(f'COPY {config["copy_src"]} {config["copy_dest"]}\n')
    f.write(f'EXPOSE {config["expose_port"]}\n')
    f.write(f'CMD {config["cmd"]}\n')

# Write build_vars.txt
with open('build_vars.txt', 'w') as f:
    for key, val in config.items():
        f.write(f'{key}={val}\n')

print("Dockerfile and build_vars.txt generated successfully.")

                    '''
                }
            }
        }

        stage('Run Python Script') {
            steps {
                sh '''
                    . $VENV_PATH/bin/activate
                    python parse_excel.py
                '''
            }
        }

        stage('Load Build Variables') {
            steps {
                script {
                    def props = readProperties file: 'build_vars.txt'
                    env.IMAGE_TAG = props.tag
                    env.APP_NAME = props.app_name
                }
            }
        }

        stage('Login to AWS ECR') {
            steps {
                sh '''
                    aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t $APP_NAME:$IMAGE_TAG .'
            }
        }

        stage('Tag and Push Docker Image') {
            steps {
                sh '''
                    docker tag $APP_NAME:$IMAGE_TAG $ECR_REPO:$IMAGE_TAG
                    docker push $ECR_REPO:$IMAGE_TAG
                '''
            }
        }
    }
}
